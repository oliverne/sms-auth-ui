{"version":3,"sources":["webpack://@oliverne/sms-auth-ui/./src/components/AppRoot.module.scss?7580","webpack://@oliverne/sms-auth-ui/./src/components/AppRoot.template.ts","webpack://@oliverne/sms-auth-ui/./src/components/AppRoot.component.ts","webpack://@oliverne/sms-auth-ui/./src/components/CustomInput.module.scss?aebf","webpack://@oliverne/sms-auth-ui/./src/validators/validatePhoneNumber.ts","webpack://@oliverne/sms-auth-ui/./src/validators/validateRegisterNumber.ts","webpack://@oliverne/sms-auth-ui/./src/validators/validateName.ts","webpack://@oliverne/sms-auth-ui/./src/components/CustomInput.component.ts","webpack://@oliverne/sms-auth-ui/./src/validators/index.ts","webpack://@oliverne/sms-auth-ui/./src/components/CustomSelect.module.scss?b883","webpack://@oliverne/sms-auth-ui/./src/components/CustomSelect.component.ts","webpack://@oliverne/sms-auth-ui/./src/components/TermsBox.module.scss?6e62","webpack://@oliverne/sms-auth-ui/./src/components/TermsBox.component.ts","webpack://@oliverne/sms-auth-ui/./src/main.ts"],"names":["defaultState","name","registerNumber","carrierCode","phoneNumber","termsCode","AppRoot","HTMLElement","super","handleStateUpdated","e","this","submitButton","el","target","isValid","getAttribute","curFieldIndex","curIndex","parseInt","nextElement","querySelector","maybeInput","focus","checkAllStatesValid","removeAttribute","setAttribute","updateState","handleSubmitOnly","HTMLButtonElement","type","toLocaleLowerCase","console","log","state","alert","template","terms","carriers","addEventListener","render","formFields","querySelectorAll","newState","forEach","key","value","test","JSON","parse","Object","keys","every","innerHTML","carrierSelector","stringify","termsBox","tag","validatePhoneNumber","onlyNumber","replace","formatted","length","slice","normalized","len","validateRegisterNumber","valid","validateName","CustomInput","handleInput","input","HTMLInputElement","validate","classList","remove","emitUpdate","handleChange","add","stateKey","getValidator","dispatchEvent","CustomEvent","bubbles","cancelable","label","maxLength","CustomSelect","handleSelectChanged","HTMLSelectElement","options","selectedIndex","select","oldValue","newValue","populateOptions","selectDefaultOption","list","frag","document","createDocumentFragment","item","opt","createElement","code","innerText","description","appendChild","defaultOption","TermsBox","handleClick","handleCheck","agreeAll","handleAgreeAll","preventDefault","cb","checked","populateAgreements","checks","Array","from","pass","filter","dataset","required","values","map","field","labelId","termsId","title","agrees","customElements","define","placeholder","getElementById","body","app"],"mappings":"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","file":"bundle.a6edb9f8.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"main\":\"_25mVTNWZnPU1m_d6PN9GuN\",\"header\":\"_3Y8p8ivdc1LgdLeCZYJntg\",\"title\":\"_1T0J5WReULLmqY1bFiv-Fp\",\"desc\":\"sgbrykgaZOqZIiqrLbQYM\",\"form\":\"_1_9PCVfb5B54sKFsvvuKZr\",\"iconQuestion\":\"_1kcUG1-mQvQJx91ZVrARbI\",\"notice\":\"_3qE6DltUDGfDtiPeylZJX-\",\"submit\":\"_3pPjfA8xXf94oXPfuVehJi\",\"submitButton\":\"_3FYMC18HB1mRmHNwUWRaoy\"};","import styles from './AppRoot.module.scss'\n\nconst template = `\n  <div class=\"${styles.main}\">\n    <header class=\"${styles.header}\">\n      <h1 class=\"${styles.title}\">입력정보</h1>\n      <h2 class=\"${styles.desc}\">본인 명의의 휴대폰 정보를 입력하세요</h2>\n    </header>\n\n    <div class=\"${styles.form}\">\n      <custom-select field-index=\"1\" state-key=\"carrierCode\" value=\"\" label=\"통신사\"></custom-select>\n\n      <custom-input field-index=\"2\" state-key=\"phoneNumber\" value=\"\" label=\"휴대폰 번호\" max-length=\"13\"></custom-input>\n      <custom-input field-index=\"3\" state-key=\"registerNumber\" value=\"\" label=\"주민등록번호\" max-length=\"8\"></custom-input>\n      <custom-input field-index=\"4\" state-key=\"name\" value=\"\" label=\"이름\" max-length=\"10\"></custom-input>\n\n      <div class=\"${styles.notice}\">\n        <i class=\"${styles.iconQuestion}\"></i>\n        <span class=${styles.noticeDetail}>\n          모든 정보가 올바르게 입력되었음에도\n          인증번호 요청이 되지 않는 경우 가입하신 통신사에 문의해주세요.\n        </span>\n      </div>\n\n      <terms-box state-key=\"termsCode\" value=\"[]\"></terms-box>\n\n      <div class=\"${styles.submit}\">\n        <button type=\"submit\" disabled class=\"${styles.submitButton}\">인증번호요청</button>\n      </div>\n    </div>\n  </div>\n`\n\nexport default template\n","import template from './AppRoot.template'\nimport terms from '../config/terms.json'\nimport carriers from '../config/carriers.json'\n\ninterface IAppState {\n  name: string\n  registerNumber: string\n  carrierCode: string\n  phoneNumber: string\n  termsCode: string[]\n}\n\nconst defaultState = {\n  name: '',\n  registerNumber: '',\n  carrierCode: '',\n  phoneNumber: '',\n  termsCode: [],\n}\n\nexport type Carriers = typeof carriers\n\nexport type Terms = typeof terms\n\nexport default class AppRoot extends HTMLElement {\n  private template: string\n\n  private terms: Terms\n\n  private carriers: Carriers\n\n  private state: IAppState\n\n  private submitButton: HTMLButtonElement | null\n\n  static tag = 'app-root'\n\n  constructor() {\n    super()\n    this.template = template\n    this.terms = terms\n    this.carriers = carriers\n    this.state = defaultState\n    this.submitButton = null\n\n    this.addEventListener('state-updated', this.handleStateUpdated)\n    this.addEventListener('click', this.handleSubmitOnly)\n  }\n\n  connectedCallback() {\n    this.render() // 최초 한번만 렌더링\n    this.submitButton = this.querySelector('button[type=submit]')\n  }\n\n  handleStateUpdated = (e: Event) => {\n    if (!this.submitButton) return\n\n    const el = e.target\n\n    /**\n     * 폼 값이 valid 할 경우 탭을 옮기는 동작\n     */\n    if (el instanceof HTMLElement) {\n      const isValid = el.getAttribute('valid') === 'valid'\n      const curFieldIndex = el.getAttribute('field-index') || '-1'\n      const curIndex = parseInt(curFieldIndex, 10)\n\n      if (curIndex > 0) {\n        const nextElement = this.querySelector(\n          `[field-index=\"${curIndex + 1}\"]`\n        )\n        if (isValid && nextElement) {\n          const maybeInput = nextElement.querySelector('input')\n          if (maybeInput) maybeInput.focus()\n        }\n      }\n    }\n\n    const pass = this.checkAllStatesValid()\n\n    if (pass) {\n      this.submitButton.removeAttribute('disabled')\n    } else {\n      this.submitButton.setAttribute('disabled', 'disabled')\n    }\n\n    this.updateState()\n  }\n\n  updateState() {\n    const formFields = this.querySelectorAll('[state-key]')\n    const newState = defaultState\n\n    /** 배열 형식의 스트링인가? */\n    const isArrayString = (arrLikeStr: string) => /^\\[.*\\]$/.test(arrLikeStr)\n\n    formFields.forEach(el => {\n      const key = el.getAttribute('state-key')\n      const value = el.getAttribute('value')\n\n      if (key) {\n        // TODO: Map 을 써야하나. TS에서 타입 에러 없이 object 값을 교체하는 방법 고민 필요.\n        ;(newState as any)[key] =\n          value && isArrayString(value) ? JSON.parse(value) : value || ''\n      }\n    })\n\n    this.state = {\n      ...newState,\n    }\n  }\n\n  /**\n   * state-key 속성이 있는 엘리먼트의 valid 속성을 읽어서 검증을 통과했는지 체크\n   */\n  checkAllStatesValid() {\n    return Object.keys(this.state).every(key => {\n      return (\n        this.querySelector(`[state-key=${key}]`)?.getAttribute('valid') ===\n        'valid'\n      )\n    })\n  }\n\n  handleSubmitOnly = (e: Event) => {\n    if (!(e.target instanceof HTMLButtonElement)) return\n    if (e.target.type.toLocaleLowerCase() !== 'submit') return\n    if (e.target.getAttribute('disabled') === 'disabled') return\n\n    /**\n     * 최종 결과 출력. 여기서 서버 요청하면 되겠지!\n     */\n    // eslint-disable-next-line no-console\n    console.log('Result:', this.state)\n\n    // eslint-disable-next-line no-alert\n    alert('API 서버에 요청을 할 타이밍입니다. 콘솔 창을 확인하세요.')\n  }\n\n  render() {\n    this.innerHTML = this.template\n\n    // 통신사 선택 컴포넌트에 필요한 리스트를 주입\n    const carrierSelector = this.querySelector('[state-key=carrierCode]')\n    if (carrierSelector) {\n      carrierSelector.setAttribute('list', JSON.stringify(this.carriers))\n    }\n\n    // 통신사 선택 컴포넌트에 필요한 리스트를 주입\n    const termsBox = this.querySelector('[state-key=termsCode]')\n    if (termsBox) {\n      termsBox.setAttribute('list', JSON.stringify(this.terms))\n    }\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"field\":\"_1U0WXwrNT45pA_xI62g-F3\",\"label\":\"SXK-X3RaWYLLHEqQSn58V\",\"input\":\"_2TlPqBntZv0jA10n_UslI8\",\"invalid\":\"-magD0HgKDMznGcIASkSP\"};","/**\n * @param value Phone number\n * @return Tuple of [Validated?, Formatted value, Normalized value]\n */\nexport default function validatePhoneNumber(\n  value: string\n): [boolean, string, string] {\n  if (typeof value !== 'string') return [false, '', '']\n\n  const onlyNumber = value.replace(/\\D+/g, '')\n\n  let formatted = onlyNumber\n\n  if (onlyNumber.length > 3) {\n    const first = onlyNumber.slice(0, 3)\n    const last = onlyNumber.slice(3)\n    formatted = `${first} ${last}`\n  }\n\n  // 가운데 3자리\n  if (onlyNumber.length > 7) {\n    const first = onlyNumber.slice(0, 3)\n    const mid = onlyNumber.slice(3, 6)\n    const last = onlyNumber.slice(6)\n    formatted = `${first} ${mid} ${last}`\n  }\n\n  // 가운데 4자리\n  if (onlyNumber.length > 10) {\n    const first = onlyNumber.slice(0, 3)\n    const mid = onlyNumber.slice(3, 7)\n    const last = onlyNumber.slice(7)\n    formatted = `${first} ${mid} ${last}`\n  }\n\n  const normalized = formatted.replace(/\\s/g, '')\n\n  const len = normalized.length\n  const valid = len >= 10 && len <= 11\n\n  return [valid, formatted, normalized]\n}\n","export default function validateRegisterNumber(\n  value: string\n): [boolean, string, string] {\n  const onlyNumber = value.replace(/\\D+/g, '')\n\n  let formatted = onlyNumber\n\n  if (onlyNumber.length > 6) {\n    const first = onlyNumber.slice(0, 6)\n    const last = onlyNumber.slice(6)\n    formatted = `${first}-${last}`.slice(0, 8)\n  }\n\n  const valid = /\\d\\d\\d\\d\\d\\d-\\d/.test(formatted)\n\n  const normalized = formatted.replace(/-/g, '')\n\n  return [valid, formatted, normalized]\n}\n","export default function validateName(value: string): [boolean, string, string] {\n  const formatted = value.replace(/[^ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/g, '')\n\n  const hangulOnly = /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/g.test(formatted)\n\n  const normalized = formatted\n\n  const valid = hangulOnly && formatted.length >= 2\n\n  return [valid, formatted, normalized]\n}\n","import styles from './CustomInput.module.scss'\n\nimport getValidator, { validateFn } from '../validators/index'\n\nexport default class CustomInput extends HTMLElement {\n  private validate: validateFn\n\n  private input: HTMLInputElement | null\n\n  static tag = 'custom-input'\n\n  constructor() {\n    super()\n    const stateKey = this.getAttribute('state-key') || '__undefined__'\n    this.validate = getValidator(stateKey)\n    this.input = null\n\n    this.addEventListener('keyup', this.handleInput)\n    this.addEventListener('change', this.handleChange)\n  }\n\n  connectedCallback() {\n    this.render()\n    this.input = this.querySelector('input')\n  }\n\n  handleInput = (e: Event) => {\n    if (this.input && e.target instanceof HTMLInputElement) {\n      const [isValid, formatted, normalized] = this.validate(e.target.value)\n\n      // 보낼값\n      this.setAttribute('value', normalized)\n\n      // 표시값\n      this.input.value = formatted\n\n      // 검증통과 여부 엘리먼트에 표시\n      if (isValid) {\n        this.setAttribute('valid', 'valid')\n        this.classList.remove(styles.invalid)\n      } else {\n        this.removeAttribute('valid')\n      }\n\n      this.emitUpdate()\n    }\n  }\n\n  handleChange = (e: Event) => {\n    if (e.target instanceof HTMLInputElement) {\n      if (this.getAttribute('valid') !== 'valid') {\n        this.classList.add(styles.invalid)\n      }\n      this.emitUpdate()\n    }\n  }\n\n  emitUpdate() {\n    // 부모로 값이 변했음을 알림\n    this.dispatchEvent(\n      new CustomEvent('state-updated', {\n        bubbles: true,\n        cancelable: true,\n      })\n    )\n  }\n\n  render() {\n    const label = this.getAttribute('label') || ''\n    const value = this.getAttribute('value') || ''\n    const maxLength = this.getAttribute('max-length') || ''\n\n    this.innerHTML = `\n      <div class=\"${styles.field}\">\n        <label class=\"${styles.label}\">${label}</label>\n        <input type=\"text\" value=\"${value}\" class=\"${styles.input}\" maxlength=\"${maxLength}\">\n      </div>\n    `\n  }\n}\n","import validatePhoneNumber from './validatePhoneNumber'\nimport validateRegisterNumber from './validateRegisterNumber'\nimport validateName from './validateName'\n\n// TODO: 튜플 타입을 좀더 알기 쉽게 정의할 방법?\nexport type validateFn = (value: string) => [Boolean, string, string]\n\nexport default function getValidator(key: string): validateFn {\n  switch (key) {\n    case 'phoneNumber':\n      return validatePhoneNumber\n\n    case 'registerNumber':\n      return validateRegisterNumber\n\n    case 'name':\n      return validateName\n\n    // 아무일도 하지 않는 검증기!\n    default:\n      return (value: string) => [false, value, value]\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"field\":\"wps43E-FCQ2bFp3wiOaz-\",\"label\":\"EMTzP_YwmIKAhxs3WKbJn\",\"select\":\"_2gARZoM_S2Mk_m0BBE-g-M\"};","import styles from './CustomSelect.module.scss'\n\nimport { Carriers } from './AppRoot.component'\n\nexport default class CustomSelect extends HTMLElement {\n  private select: HTMLSelectElement | null\n\n  static tag = 'custom-select'\n\n  // 통신사 리스트를 최상위 컴포넌트에서 받아옴\n  static get observedAttributes() {\n    return ['list']\n  }\n\n  constructor() {\n    super()\n    this.select = null\n  }\n\n  connectedCallback() {\n    this.render() // 최초 한번만 렌더링\n\n    this.select = this.querySelector<HTMLSelectElement>(`.${styles.select}`)\n    if (this.select)\n      this.select.addEventListener('change', this.handleSelectChanged)\n  }\n\n  attributeChangedCallback(name: string, oldValue: string, newValue: string) {\n    if (name === 'list' && oldValue !== newValue) {\n      try {\n        this.populateOptions(JSON.parse(newValue))\n        this.selectDefaultOption()\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.log('통신사 정보가 잘못되었습니다.')\n      }\n    }\n  }\n\n  handleSelectChanged = (e: Event) => {\n    const el = e.target\n    if (!(el instanceof HTMLSelectElement)) return\n\n    const { value } = el.options[el.selectedIndex]\n\n    this.setAttribute('value', value)\n    this.setAttribute('valid', 'valid')\n\n    // 부모로 값이 변했음을 알림\n    this.dispatchEvent(\n      new CustomEvent('state-updated', {\n        bubbles: true,\n        cancelable: true,\n      })\n    )\n  }\n\n  populateOptions(list: Carriers) {\n    if (!this.select) return\n\n    const frag = document.createDocumentFragment()\n\n    list.forEach(item => {\n      const opt = document.createElement('option')\n      opt.value = item.code\n      opt.innerText = item.description\n      frag.appendChild(opt)\n    })\n\n    this.select.appendChild(frag)\n  }\n\n  // 첫번째 옵션을 무조건 선택\n  selectDefaultOption() {\n    if (!this.select) return\n\n    const defaultOption = this.select?.options[0]\n    this.select.value = defaultOption.value\n\n    this.select.dispatchEvent(new CustomEvent('change'))\n  }\n\n  render() {\n    const label = this.getAttribute('label')\n\n    this.innerHTML = `\n      <div class=\"${styles.field}\">\n        <label class=\"${styles.label}\">${label}</label>\n        <select class=\"${styles.select}\">\n        </select>\n      </div>\n    `\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"terms\":\"_1FByQTc2-YbTNWcCwbVkjK\",\"agrees\":\"_3vSZlUGkB67AEMky9EsE7E\",\"field\":\"_2AGcdams3Uhfmr6esg9joc\",\"cb\":\"_2MRNIxJNRSFHL0Wo9tCHwn\",\"label\":\"_3j-H_B24pQRfXqKY00sha7\",\"agreeAll\":\"jQY48ahWhVI6bECN7hnGT\",\"allChecked\":\"_3Meq49VGRTutuK75ejRATd\"};","import styles from './TermsBox.module.scss'\n\nimport { Terms } from './AppRoot.component'\n\nexport default class TermsBox extends HTMLElement {\n  static tag = 'terms-box'\n\n  static get observedAttributes() {\n    return ['list']\n  }\n\n  connectedCallback() {\n    this.render()\n\n    this.addEventListener('click', this.handleClick) // 이벤트 위임\n  }\n\n  attributeChangedCallback(name: string, oldValue: string, newValue: string) {\n    if (name === 'list' && oldValue !== newValue) {\n      try {\n        this.populateAgreements(JSON.parse(newValue))\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.log('약관 정보가 잘못되었습니다.')\n      }\n    }\n  }\n\n  validate() {\n    const checks = Array.from(this.querySelectorAll('input'))\n    const pass = checks\n      .filter(cb => cb.dataset.required === 'true')\n      .every(cb => cb.checked)\n\n    const values = checks.filter(cb => cb.checked).map(cb => cb.value)\n    this.setAttribute('value', JSON.stringify(values))\n\n    if (pass) {\n      this.setAttribute('valid', 'valid')\n    } else {\n      this.removeAttribute('valid')\n    }\n\n    // 부모로 값이 변했음을 알림\n    this.dispatchEvent(\n      new CustomEvent('state-updated', {\n        bubbles: true,\n        cancelable: true,\n      })\n    )\n  }\n\n  handleClick = (e: Event) => {\n    if (e.target instanceof HTMLInputElement) {\n      this.handleCheck()\n      const agreeAll = this.querySelector(`.${styles.agreeAll}`)\n      if (agreeAll) agreeAll.classList.remove(styles.allChecked)\n    } else if (e.target instanceof HTMLButtonElement) {\n      this.handleAgreeAll(e)\n    }\n  }\n\n  handleAgreeAll = (e: Event) => {\n    e.preventDefault()\n\n    this.querySelectorAll('input').forEach(cb => {\n      cb.checked = true // eslint-disable-line no-param-reassign\n    })\n\n    const agreeAll = this.querySelector(`.${styles.agreeAll}`)\n    if (agreeAll) agreeAll.classList.add(styles.allChecked)\n\n    this.validate()\n  }\n\n  handleCheck = () => {\n    this.validate()\n  }\n\n  populateAgreements(list: Terms) {\n    const frag = document.createDocumentFragment()\n\n    list.forEach(item => {\n      const field = document.createElement('div')\n      field.classList.add(styles.field)\n\n      const labelId = `term__${item.termsId}`\n      field.innerHTML = `\n        <input\n          id=\"${labelId}\"\n          type=\"checkbox\"\n          value=\"${item.termsId}\"\n          data-required=\"${item.required}\"\n          class=\"${styles.cb}\"\n        ><label for=\"${labelId}\" class=\"${styles.label}\">${item.title}</label>\n      `\n      frag.appendChild(field)\n    })\n\n    const agrees = this.querySelector(`.${styles.agrees}`)\n    if (agrees) agrees.appendChild(frag)\n  }\n\n  render() {\n    this.innerHTML = `\n      <div class=\"${styles.terms}\">\n        <div class=\"${styles.agrees}\">\n        </div>\n        <div class=\"${styles.field}\">\n          <button type=\"button\" class=\"${styles.agreeAll}\">전체 동의하기</button>\n        </div>\n      </div>\n    `\n  }\n}\n","import './main.scss' // 글로벌 스타일\n\nimport AppRoot from './components/AppRoot.component'\nimport CustomInput from './components/CustomInput.component'\nimport CustomSelect from './components/CustomSelect.component'\nimport TermsBox from './components/TermsBox.component'\n\ncustomElements.define(AppRoot.tag, AppRoot)\ncustomElements.define(CustomInput.tag, CustomInput)\ncustomElements.define(CustomSelect.tag, CustomSelect)\ncustomElements.define(TermsBox .tag, TermsBox)\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const placeholder = document.getElementById('root') || document.body\n  const app = document.createElement('app-root')\n  placeholder.appendChild(app)\n})\n"],"sourceRoot":""}